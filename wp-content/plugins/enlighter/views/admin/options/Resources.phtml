<?php if (!defined('ENLIGHTER_INIT')) die('DIRECT ACCESS PROHIBITED'); ?>

<!-- Enlighter JS Resources !-->
<div class="postbox enlighter-postbox">
    <h3 class="hndle"><span><?php _e('EnlighterJS Resources', 'enlighter'); ?></span></h3>
    <div class="inside enlighter-setting-section">

        <h4><?php _e('Assets', 'enlighter'); ?></h4>

        <!-- EnlighterJS library !-->
        <?php $this->_settingsUtility->displayCheckbox(
            __('EnlighterJS library', 'enlighter'), 
            'enlighterjs-assets-js',
            array(
                'label' => 'Include',
                'description' => __('Add the EnlighterJS javascript library to your site.', 'enlighter')
            ));
        ?>

        <!-- build-in themes !-->
        <?php $this->_settingsUtility->displayCheckbox(
            __('EnlighterJS themes', 'enlighter'), 
            'enlighterjs-assets-themes',
            array(
                'label' => 'Include',
                'description' => __('Add the EnlighterJS stylesheet including all themes to your site.', 'enlighter')
            ));
        ?>

        <!-- User themes !-->
        <?php $this->_settingsUtility->displayCheckbox(
            __('External themes', 'enlighter'), 
            'enlighterjs-assets-themes-external',
            array(
                'label' => 'Include',
                'description' => __('Custom/external themes located into your themes directory can be automatically loaded.', 'enlighter')
            ));
        ?>

        <h4><?php _e('Initialization', 'enlighter'); ?></h4>

        <p>In case you're using optimization plugins which are invoking scripts via <code>defer</code> or <code>async</code>, <strong>you have to</strong>
        use the <code>single file</code> mode - otherwise is initialization is triggered before the library has been loaded.<br />
        As a disadvantage, by changing the Enlighter settings the external javascript file needs to be regenerated which forces the web-browser to reload the whole file (caching).
        This shouldn't have any impact to normal websites.</p>
        <p>This option has no effect when <code>Dynamic-Resource-Invocation</code> has been enabled!</p>

        <?php
        // font family
        $this->_settingsUtility->displaySelect(
            __('Initialization code', 'enlighter'),
            'enlighterjs-init',
            array(
                'inline' => __('Add inline code to wp_footer (default)', 'enlighter'),
                'merged' => __('Add code to the library (single file)', 'enlighter'),
                'disabled' => __('Do not include (for manual usage only)', 'enlighter')
            ),
            array(
                'description' => __('EnlighterJS requires to be initialized by a small code snippet which will be added as inline code after the EnlighterJS library.', 'enlighter')
            )
        );
        ?>

        <h4><?php _e('Optimization', 'enlighter'); ?></h4>

        <p>The <code>Dynamic-Resource-Invocation</code> features adds a small javascript observer (~1KB) to your website which invokes the EnlighterJS assets loading (styles+scripts) automatically when
        codeblocks with matching CSS selectors have been found. It also works with the dynamic content extension as well as with third party optimization plugins.</p>

        <?php $this->_settingsUtility->displayCheckbox(
            __('Dynamic Resource Invocation (DRI)', 'enlighter'), 
            'dynamic-resource-invocation',
            array(
                'label' => 'Enable',
                'description' => __('To optimize your website load-time it`s possible to load the EnlighterJS library only if codeblocks are used on the current page. In case it`s enable, the plugin will observer it`s invocation (visual editor, shortcodes, markdown).', 'enlighter')
            ));
        ?>
    </div>
</div>